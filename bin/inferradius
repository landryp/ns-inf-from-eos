#!/usr/bin/python
__doc__ = 'INFERRADIUS -- use EoS posterior samples to infer radius of target neutron star'
__usage__ = 'inferradius nsname path/to/macro/dir/ path/to/m/prior/samples [-v] [-n 1e4] [-o ./]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '09-2019'

import numpy as np
from optparse import OptionParser
from scipy.interpolate import interp1d
from random import sample
from numpy.random import choice
import glob
from nsinffromeos.constants import *

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-n', '--numsamps', default=1e4, help='maximum number of samples to use for Monte-Carlo integration, DEFAULT=1e4', metavar='MAX_NUM_SAMPS')
parser.add_option('-o', '--outdir', default='./', help='path to output directory, DEFAULT=./', metavar='PATH/TO/OUTDIR')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

opts, args = parser.parse_args()
nsname = str(args[0])
eos_path = str(args[1])
mprior_path = str(args[2])
nsamps = int(float(opts.numsamps))
outdir = str(opts.outdir)
verb = opts.verbose

# LOAD PRIOR SAMPLES

eoslist = glob.glob(eos_path+'/*.csv')
LofMlist = []
RofMlist = []
for eos in eoslist:
	macro_dat = np.genfromtxt(eos,names=True,delimiter=',',dtype=None)
	Mdat = macro_dat['M']
	Ldat = macro_dat['Lambda']
	Rdat = macro_dat['R']
	LofM = interp1d(Mdat,Ldat,kind='linear',bounds_error=False,fill_value=np.nan)
	LofMlist.append(LofM)
	RofM = interp1d(Mdat,Rdat,kind='linear',bounds_error=False,fill_value=np.nan)
	RofMlist.append(RofM)

mprior = np.genfromtxt(mprior_path,names=True,delimiter=',',dtype=None)['m']

minlen = len(mprior)
num = min(minlen,nsamps)

if num != nsamps:
	print 'Infsufficient number of prior samples available; sampling with replacement'
	num = nsamps

eossamps = np.random.choice(np.array(eoslist),num)
LofMsamps = [LofMlist[list(eoslist).index(eos)] for eos in eossamps]
RofMsamps = [RofMlist[list(eoslist).index(eos)] for eos in eossamps]
msamps = choice(mprior,size=num)

if verb: print 'Loading EoSs from {0} and m prior samples from {1}'.format(str(eos_path),str(mprior_path))

# IMPLEMENT COMPOSITE LIKELIHOOD FOR C AND R AS A FUNCTION OF PRIOR VARIABLES

def Lofm(m,LofM):

	Lambda = LofM(m)

	return Lambda
	
def Rofm(m,RofM):

	R = RofM(m)

	return R
	
def compact(m,R):

	C = G*m*Msun/(c**2*R*1e5)

	return C

def Cofm(m,RofM):

	R = RofM(m)
	C = compact(m,R)

	return C

# PERFORM INFERENCE

if verb: print 'Inferring radius for {0}'.format(nsname)

Lpost = []
Cpost = []
Rpost = []
for count in range(num):

	LofM = LofMsamps[count]
	RofM = RofMsamps[count]
	m = msamps[count]			

	L = Lofm(m,LofM)
	R = Rofm(m,RofM)
	C = compact(m,R)
	Lpost.append(L)
	Cpost.append(C)
	Rpost.append(R)

# SAVE POSTERIOR DATA

post = zip(msamps,eossamps,Lpost,Cpost,Rpost)
outfile = outdir+nsname+"_radius.csv"

if verb: print 'Saving radius posterior samples for {0} to {1}'.format(nsname,outfile)

np.savetxt(outfile,post,fmt='%s',delimiter=',',header='m,EoS,Lambda,C,R',comments='')
