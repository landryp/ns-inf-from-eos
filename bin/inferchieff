#!/usr/bin/python
__doc__ = 'INFERCHIEFF -- use EoS posterior samples to infer effective dimensionless spin of target binary neutron star'
__usage__ = 'inferchieff nsname path/to/macro/dir/ path/to/m1/prior/samples path/to/m2/prior/samples path/to/f1/prior/samples path/to/f2/prior/samples path/to/costheta1/prior/samples path/to/costheta2/prior/samples [-v] [-n 1e4] [-o ./]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '09-2019'

import numpy as np
from optparse import OptionParser
from scipy.interpolate import interp1d
from random import sample, choice
import glob
from nsinffromeos.constants import *

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-n', '--numsamps', default=1e4, help='maximum number of samples to use for Monte-Carlo integration, DEFAULT=1e4', metavar='MAX_NUM_SAMPS')
parser.add_option('-o', '--outdir', default='./', help='path to output directory, DEFAULT=./', metavar='PATH/TO/OUTDIR')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')
parser.add_option('-s', '--spincorr', action='store_true', default=False, help='toggle spin corrections to moment of inertia, DEFAULT=False')

opts, args = parser.parse_args()
nsname = str(args[0])
eos_path = str(args[1])
m1prior_path = str(args[2])
m2prior_path = str(args[3])
f1prior_path = str(args[4])
f2prior_path = str(args[5])
costheta1prior_path = str(args[6])
costheta2prior_path = str(args[7])
nsamps = int(float(opts.numsamps))
outdir = str(opts.outdir)
verb = opts.verbose
spin_corr = opts.spincorr

if spin_corr: dI_spin = eval('moicorr_B13')

# LOAD PRIOR SAMPLES

eoslist = glob.glob(eos_path+'/*.csv')
IofMlist = []
for eos in eoslist:
	macro_dat = np.genfromtxt(eos,names=True,delimiter=',',dtype=None)
	Mdat = macro_dat['M']
	Idat = macro_dat['I']
	IofM = interp1d(Mdat,Idat,kind='linear',bounds_error=False,fill_value=np.nan)
	IofMlist.append(IofM)

m1prior = np.genfromtxt(m1prior_path,names=True,delimiter=',',dtype=None)['m']
m2prior = np.genfromtxt(m2prior_path,names=True,delimiter=',',dtype=None)['m']
f1prior = np.genfromtxt(f1prior_path,names=True,delimiter=',',dtype=None)['f']
f2prior = np.genfromtxt(f2prior_path,names=True,delimiter=',',dtype=None)['f']
costheta1prior = np.genfromtxt(costheta1prior_path,names=True,delimiter=',',dtype=None)['costheta']
costheta2prior = np.genfromtxt(costheta2prior_path,names=True,delimiter=',',dtype=None)['costheta']

minlen = min(len(m1prior),len(m2prior),len(f1prior),len(f2prior),len(costheta1prior),len(costheta2prior))
num = min(minlen,nsamps)

eossamps = np.random.choice(np.array(eoslist),num)
IofMsamps = [IofMlist[list(eoslist).index(eos)] for eos in eossamps]
m1samps = sample(m1prior,num)
m2samps = sample(m2prior,num)
f1samps = sample(f1prior,num)
f2samps = sample(f2prior,num)
costheta1samps = sample(costheta1prior,num)
costheta2samps = sample(costheta2prior,num)

if verb: print 'Loading EoSs from {0}, m prior samples from {1} & {2}, f prior samples from {3} & {4} and costheta prior samples from {5} & {6}'.format(str(eos_path),str(m1prior_path),str(m2prior_path),str(f1prior_path),str(f2prior_path),str(costheta1prior_path),str(costheta2prior_path))

# IMPLEMENT COMPOSITE LIKELIHOOD FOR MOI AND SPIN AS A FUNCTION OF PRIOR VARIABLES

def Iofm(m,IofM):

	I = IofM(m)

	return I
	
def spin(f,m,I):

	chi = 2.*np.pi*f*c*I*1e45/(G*m**2*Msun**2)

	return chi

def chiofmf(m,IofM,f):

	I = IofM(m)
	chi = spin(f,m,I)

	return chi
	
def effspin(chi1,m1,costheta1,chi2,m2,costheta2):

	chieff = (chi1*m1*Msun*costheta1 + chi2*m2*Msun*costheta2)/(m1*Msun+m2*Msun) 

	return chieff
	
def chieffofm12f12costheta12(m1,m2,IofM,f1,f2,costheta1,costheta2):

	I1 = IofM(m1)
	I2 = IofM(m2)
	chi1 = spin(f1,m1,I1)
	chi2 = spin(f2,m2,I2)
	chieff = effspin(chi1,m1,costheta1,chi2,m2,costheta2)

	return chieff

# PERFORM INFERENCE

if verb: print 'Inferring effective spin for {0}'.format(nsname)

chieffpost = []
chi1post = []
chi2post = []
I1post = []
I2post = []
for count in range(num):

	IofM = IofMsamps[count]
	m1 = m1samps[count]
	m2 = m2samps[count]
	f1 = f1samps[count]
	f2 = f2samps[count]
	costheta1 = costheta1samps[count]
	costheta2 = costheta2samps[count]			

	I1 = Iofm(m1,IofM)
	I2 = Iofm(m2,IofM)
	if spin_corr:
		I1 = I1 + dI_spin(m1,f1,I1)
		I2 = I2 + dI_spin(m2,f2,I2)
	chi1 = spin(f1,m1,I1)
	chi2 = spin(f2,m2,I2)
	chieff = effspin(chi1,m1,costheta1,chi2,m2,costheta2)
	I1post.append(I1)
	I2post.append(I2)
	chi1post.append(chi1)
	chi2post.append(chi2)
	chieffpost.append(chieff)

# SAVE POSTERIOR DATA

post = zip(m1samps,m2samps,eossamps,f1samps,f2samps,costheta1samps,costheta2samps,I1post,I2post,chi1post,chi2post,chieffpost)
outfile = outdir+nsname+"_chieff.csv"

if verb: print 'Saving effective spin posterior samples for {0} to {1}'.format(nsname,outfile)

np.savetxt(outfile,post,fmt='%s',delimiter=',',header='m1,m2,EoS,f1,f2,costheta1,costheta2,I1,I2,chi1,chi2,chieff',comments='')

